/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IProxyPaymentAddressInterface extends utils.Interface {
  functions: {
    "memo()": FunctionFragment;
    "projectId()": FunctionFragment;
    "tap()": FunctionFragment;
    "terminalDirectory()": FunctionFragment;
    "ticketBooth()": FunctionFragment;
    "transferTickets(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "memo"
      | "projectId"
      | "tap"
      | "terminalDirectory"
      | "ticketBooth"
      | "transferTickets"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "memo", values?: undefined): string;
  encodeFunctionData(functionFragment: "projectId", values?: undefined): string;
  encodeFunctionData(functionFragment: "tap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminalDirectory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBooth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTickets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "memo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminalDirectory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBooth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTickets",
    data: BytesLike
  ): Result;

  events: {
    "Receive(address,uint256)": EventFragment;
    "Tap(address,uint256)": EventFragment;
    "TransferTickets(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTickets"): EventFragment;
}

export interface ReceiveEventObject {
  caller: string;
  value: BigNumber;
}
export type ReceiveEvent = TypedEvent<[string, BigNumber], ReceiveEventObject>;

export type ReceiveEventFilter = TypedEventFilter<ReceiveEvent>;

export interface TapEventObject {
  caller: string;
  value: BigNumber;
}
export type TapEvent = TypedEvent<[string, BigNumber], TapEventObject>;

export type TapEventFilter = TypedEventFilter<TapEvent>;

export interface TransferTicketsEventObject {
  caller: string;
  beneficiary: string;
  projectId: BigNumber;
  amount: BigNumber;
}
export type TransferTicketsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TransferTicketsEventObject
>;

export type TransferTicketsEventFilter = TypedEventFilter<TransferTicketsEvent>;

export interface IProxyPaymentAddress extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProxyPaymentAddressInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketBooth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTickets(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  memo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projectId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tap(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  terminalDirectory(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketBooth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTickets(
    _beneficiary: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    memo(overrides?: CallOverrides): Promise<string>;

    projectId(overrides?: CallOverrides): Promise<BigNumber>;

    tap(overrides?: CallOverrides): Promise<void>;

    terminalDirectory(overrides?: CallOverrides): Promise<string>;

    ticketBooth(overrides?: CallOverrides): Promise<string>;

    transferTickets(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Receive(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      value?: null
    ): ReceiveEventFilter;
    Receive(
      caller?: PromiseOrValue<string> | null,
      value?: null
    ): ReceiveEventFilter;

    "Tap(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      value?: null
    ): TapEventFilter;
    Tap(caller?: PromiseOrValue<string> | null, value?: null): TapEventFilter;

    "TransferTickets(address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): TransferTicketsEventFilter;
    TransferTickets(
      caller?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): TransferTicketsEventFilter;
  };

  estimateGas: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketBooth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTickets(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tap(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketBooth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTickets(
      _beneficiary: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
