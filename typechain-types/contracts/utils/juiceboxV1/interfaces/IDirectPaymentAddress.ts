/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IDirectPaymentAddressInterface extends utils.Interface {
  functions: {
    "memo()": FunctionFragment;
    "projectId()": FunctionFragment;
    "terminalDirectory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "memo" | "projectId" | "terminalDirectory"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "memo", values?: undefined): string;
  encodeFunctionData(functionFragment: "projectId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminalDirectory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "memo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminalDirectory",
    data: BytesLike
  ): Result;

  events: {
    "Forward(address,uint256,address,uint256,string,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Forward"): EventFragment;
}

export interface ForwardEventObject {
  payer: string;
  projectId: BigNumber;
  beneficiary: string;
  value: BigNumber;
  memo: string;
  preferUnstakedTickets: boolean;
}
export type ForwardEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, boolean],
  ForwardEventObject
>;

export type ForwardEventFilter = TypedEventFilter<ForwardEvent>;

export interface IDirectPaymentAddress extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDirectPaymentAddressInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  memo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projectId(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  terminalDirectory(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    memo(overrides?: CallOverrides): Promise<string>;

    projectId(overrides?: CallOverrides): Promise<BigNumber>;

    terminalDirectory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Forward(address,uint256,address,uint256,string,bool)"(
      payer?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: null,
      value?: null,
      memo?: null,
      preferUnstakedTickets?: null
    ): ForwardEventFilter;
    Forward(
      payer?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: null,
      value?: null,
      memo?: null,
      preferUnstakedTickets?: null
    ): ForwardEventFilter;
  };

  estimateGas: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    memo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projectId(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    terminalDirectory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
