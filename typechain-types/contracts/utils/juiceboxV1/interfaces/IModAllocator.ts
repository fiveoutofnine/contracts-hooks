/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IModAllocatorInterface extends utils.Interface {
  functions: {
    "allocate(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "allocate"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;

  events: {
    "Allocate(uint256,uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocate"): EventFragment;
}

export interface AllocateEventObject {
  projectId: BigNumber;
  forProjectId: BigNumber;
  beneficiary: string;
  amount: BigNumber;
  caller: string;
}
export type AllocateEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  AllocateEventObject
>;

export type AllocateEventFilter = TypedEventFilter<AllocateEvent>;

export interface IModAllocator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModAllocatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      _projectId: PromiseOrValue<BigNumberish>,
      _forProjectId: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allocate(
    _projectId: PromiseOrValue<BigNumberish>,
    _forProjectId: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      _projectId: PromiseOrValue<BigNumberish>,
      _forProjectId: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Allocate(uint256,uint256,address,uint256,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      forProjectId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null,
      caller?: null
    ): AllocateEventFilter;
    Allocate(
      projectId?: PromiseOrValue<BigNumberish> | null,
      forProjectId?: PromiseOrValue<BigNumberish> | null,
      beneficiary?: PromiseOrValue<string> | null,
      amount?: null,
      caller?: null
    ): AllocateEventFilter;
  };

  estimateGas: {
    allocate(
      _projectId: PromiseOrValue<BigNumberish>,
      _forProjectId: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _projectId: PromiseOrValue<BigNumberish>,
      _forProjectId: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
