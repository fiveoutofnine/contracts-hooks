/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type PayoutModStruct = {
  preferUnstaked: PromiseOrValue<boolean>;
  percent: PromiseOrValue<BigNumberish>;
  lockedUntil: PromiseOrValue<BigNumberish>;
  beneficiary: PromiseOrValue<string>;
  allocator: PromiseOrValue<string>;
  projectId: PromiseOrValue<BigNumberish>;
};

export type PayoutModStructOutput = [
  boolean,
  number,
  number,
  string,
  string,
  BigNumber
] & {
  preferUnstaked: boolean;
  percent: number;
  lockedUntil: number;
  beneficiary: string;
  allocator: string;
  projectId: BigNumber;
};

export type TicketModStruct = {
  preferUnstaked: PromiseOrValue<boolean>;
  percent: PromiseOrValue<BigNumberish>;
  lockedUntil: PromiseOrValue<BigNumberish>;
  beneficiary: PromiseOrValue<string>;
};

export type TicketModStructOutput = [boolean, number, number, string] & {
  preferUnstaked: boolean;
  percent: number;
  lockedUntil: number;
  beneficiary: string;
};

export interface IModStoreInterface extends utils.Interface {
  functions: {
    "payoutModsOf(uint256,uint256)": FunctionFragment;
    "projects()": FunctionFragment;
    "setPayoutMods(uint256,uint256,(bool,uint16,uint48,address,address,uint56)[])": FunctionFragment;
    "setTicketMods(uint256,uint256,(bool,uint16,uint48,address)[])": FunctionFragment;
    "ticketModsOf(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "payoutModsOf"
      | "projects"
      | "setPayoutMods"
      | "setTicketMods"
      | "ticketModsOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "payoutModsOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPayoutMods",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PayoutModStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketMods",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      TicketModStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketModsOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "payoutModsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPayoutMods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketMods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketModsOf",
    data: BytesLike
  ): Result;

  events: {
    "SetPayoutMod(uint256,uint256,tuple,address)": EventFragment;
    "SetTicketMod(uint256,uint256,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPayoutMod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTicketMod"): EventFragment;
}

export interface SetPayoutModEventObject {
  projectId: BigNumber;
  configuration: BigNumber;
  mods: PayoutModStructOutput;
  caller: string;
}
export type SetPayoutModEvent = TypedEvent<
  [BigNumber, BigNumber, PayoutModStructOutput, string],
  SetPayoutModEventObject
>;

export type SetPayoutModEventFilter = TypedEventFilter<SetPayoutModEvent>;

export interface SetTicketModEventObject {
  projectId: BigNumber;
  configuration: BigNumber;
  mods: TicketModStructOutput;
  caller: string;
}
export type SetTicketModEvent = TypedEvent<
  [BigNumber, BigNumber, TicketModStructOutput, string],
  SetTicketModEventObject
>;

export type SetTicketModEventFilter = TypedEventFilter<SetTicketModEvent>;

export interface IModStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    payoutModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PayoutModStructOutput[]]>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    setPayoutMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: PayoutModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTicketMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: TicketModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[TicketModStructOutput[]]>;
  };

  payoutModsOf(
    _projectId: PromiseOrValue<BigNumberish>,
    _configuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PayoutModStructOutput[]>;

  projects(overrides?: CallOverrides): Promise<string>;

  setPayoutMods(
    _projectId: PromiseOrValue<BigNumberish>,
    _configuration: PromiseOrValue<BigNumberish>,
    _mods: PayoutModStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTicketMods(
    _projectId: PromiseOrValue<BigNumberish>,
    _configuration: PromiseOrValue<BigNumberish>,
    _mods: TicketModStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketModsOf(
    _projectId: PromiseOrValue<BigNumberish>,
    _configuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<TicketModStructOutput[]>;

  callStatic: {
    payoutModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PayoutModStructOutput[]>;

    projects(overrides?: CallOverrides): Promise<string>;

    setPayoutMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: PayoutModStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTicketMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: TicketModStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    ticketModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<TicketModStructOutput[]>;
  };

  filters: {
    "SetPayoutMod(uint256,uint256,tuple,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      configuration?: PromiseOrValue<BigNumberish> | null,
      mods?: null,
      caller?: null
    ): SetPayoutModEventFilter;
    SetPayoutMod(
      projectId?: PromiseOrValue<BigNumberish> | null,
      configuration?: PromiseOrValue<BigNumberish> | null,
      mods?: null,
      caller?: null
    ): SetPayoutModEventFilter;

    "SetTicketMod(uint256,uint256,tuple,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      configuration?: PromiseOrValue<BigNumberish> | null,
      mods?: null,
      caller?: null
    ): SetTicketModEventFilter;
    SetTicketMod(
      projectId?: PromiseOrValue<BigNumberish> | null,
      configuration?: PromiseOrValue<BigNumberish> | null,
      mods?: null,
      caller?: null
    ): SetTicketModEventFilter;
  };

  estimateGas: {
    payoutModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    setPayoutMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: PayoutModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTicketMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: TicketModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    payoutModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPayoutMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: PayoutModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTicketMods(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      _mods: TicketModStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketModsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      _configuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
