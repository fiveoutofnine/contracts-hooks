/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ITicketBoothInterface extends utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "issue(uint256,string,string)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockedBalanceBy(address,address,uint256)": FunctionFragment;
    "lockedBalanceOf(address,uint256)": FunctionFragment;
    "print(address,uint256,uint256,bool)": FunctionFragment;
    "projects()": FunctionFragment;
    "redeem(address,uint256,uint256,bool)": FunctionFragment;
    "stake(address,uint256,uint256)": FunctionFragment;
    "stakedBalanceOf(address,uint256)": FunctionFragment;
    "stakedTotalSupplyOf(uint256)": FunctionFragment;
    "ticketsOf(uint256)": FunctionFragment;
    "totalSupplyOf(uint256)": FunctionFragment;
    "transfer(address,uint256,uint256,address)": FunctionFragment;
    "unlock(address,uint256,uint256)": FunctionFragment;
    "unstake(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "issue"
      | "lock"
      | "lockedBalanceBy"
      | "lockedBalanceOf"
      | "print"
      | "projects"
      | "redeem"
      | "stake"
      | "stakedBalanceOf"
      | "stakedTotalSupplyOf"
      | "ticketsOf"
      | "totalSupplyOf"
      | "transfer"
      | "unlock"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceBy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "print",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTotalSupplyOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "print", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTotalSupplyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticketsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Issue(uint256,string,string,address)": EventFragment;
    "Lock(address,uint256,uint256,address)": EventFragment;
    "Print(address,uint256,uint256,bool,bool,address)": EventFragment;
    "Redeem(address,uint256,uint256,uint256,bool,address)": EventFragment;
    "Stake(address,uint256,uint256,address)": EventFragment;
    "Transfer(address,uint256,address,uint256,address)": EventFragment;
    "Unlock(address,uint256,uint256,address)": EventFragment;
    "Unstake(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Print"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface IssueEventObject {
  projectId: BigNumber;
  name: string;
  symbol: string;
  caller: string;
}
export type IssueEvent = TypedEvent<
  [BigNumber, string, string, string],
  IssueEventObject
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export interface LockEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  caller: string;
}
export type LockEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  LockEventObject
>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export interface PrintEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  convertedTickets: boolean;
  preferUnstakedTickets: boolean;
  controller: string;
}
export type PrintEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean, string],
  PrintEventObject
>;

export type PrintEventFilter = TypedEventFilter<PrintEvent>;

export interface RedeemEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  stakedTickets: BigNumber;
  preferUnstaked: boolean;
  controller: string;
}
export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, string],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface StakeEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  caller: string;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TransferEventObject {
  holder: string;
  projectId: BigNumber;
  recipient: string;
  amount: BigNumber;
  caller: string;
}
export type TransferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnlockEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  caller: string;
}
export type UnlockEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  UnlockEventObject
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export interface UnstakeEventObject {
  holder: string;
  projectId: BigNumber;
  amount: BigNumber;
  caller: string;
}
export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface ITicketBooth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITicketBoothInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _result: BigNumber }>;

    issue(
      _projectId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockedBalanceBy(
      _operator: PromiseOrValue<string>,
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    print(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstakedTickets: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstaked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedTotalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticketsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issue(
    _projectId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockedBalanceBy(
    _operator: PromiseOrValue<string>,
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedBalanceOf(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  print(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _preferUnstakedTickets: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  projects(overrides?: CallOverrides): Promise<string>;

  redeem(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _preferUnstaked: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedBalanceOf(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedTotalSupplyOf(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticketsOf(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupplyOf(
    _projectId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlock(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _holder: PromiseOrValue<string>,
    _projectId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _projectId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedBalanceBy(
      _operator: PromiseOrValue<string>,
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    print(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstakedTickets: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    projects(overrides?: CallOverrides): Promise<string>;

    redeem(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstaked: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedTotalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Issue(uint256,string,string,address)"(
      projectId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      caller?: null
    ): IssueEventFilter;
    Issue(
      projectId?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      symbol?: null,
      caller?: null
    ): IssueEventFilter;

    "Lock(address,uint256,uint256,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): LockEventFilter;
    Lock(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): LockEventFilter;

    "Print(address,uint256,uint256,bool,bool,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      convertedTickets?: null,
      preferUnstakedTickets?: null,
      controller?: null
    ): PrintEventFilter;
    Print(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      convertedTickets?: null,
      preferUnstakedTickets?: null,
      controller?: null
    ): PrintEventFilter;

    "Redeem(address,uint256,uint256,uint256,bool,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      stakedTickets?: null,
      preferUnstaked?: null,
      controller?: null
    ): RedeemEventFilter;
    Redeem(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      stakedTickets?: null,
      preferUnstaked?: null,
      controller?: null
    ): RedeemEventFilter;

    "Stake(address,uint256,uint256,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): StakeEventFilter;
    Stake(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): StakeEventFilter;

    "Transfer(address,uint256,address,uint256,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      caller?: null
    ): TransferEventFilter;
    Transfer(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      caller?: null
    ): TransferEventFilter;

    "Unlock(address,uint256,uint256,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): UnlockEventFilter;
    Unlock(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): UnlockEventFilter;

    "Unstake(address,uint256,uint256,address)"(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): UnstakeEventFilter;
    Unstake(
      holder?: PromiseOrValue<string> | null,
      projectId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      caller?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    balanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _projectId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockedBalanceBy(
      _operator: PromiseOrValue<string>,
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    print(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstakedTickets: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstaked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedTotalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _projectId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockedBalanceBy(
      _operator: PromiseOrValue<string>,
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    print(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstakedTickets: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _preferUnstaked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedBalanceOf(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedTotalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketsOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOf(
      _projectId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _holder: PromiseOrValue<string>,
      _projectId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
