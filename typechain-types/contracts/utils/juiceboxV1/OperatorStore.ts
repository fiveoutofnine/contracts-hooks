/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface OperatorStoreInterface extends utils.Interface {
  functions: {
    "hasPermission(address,address,uint256,uint256)": FunctionFragment;
    "hasPermissions(address,address,uint256,uint256[])": FunctionFragment;
    "permissionsOf(address,address,uint256)": FunctionFragment;
    "setOperator(address,uint256,uint256[])": FunctionFragment;
    "setOperators(address[],uint256[],uint256[][])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasPermission"
      | "hasPermissions"
      | "permissionsOf"
      | "setOperator"
      | "setOperators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionsOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperators",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperators",
    data: BytesLike
  ): Result;

  events: {
    "SetOperator(address,address,uint256,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
}

export interface SetOperatorEventObject {
  operator: string;
  account: string;
  domain: BigNumber;
  permissionIndexes: BigNumber[];
  packed: BigNumber;
}
export type SetOperatorEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber],
  SetOperatorEventObject
>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface OperatorStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasPermission(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasPermissions(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permissionsOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperators(
      _operators: PromiseOrValue<string>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _permissionIndexes: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  hasPermission(
    _operator: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    _permissionIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPermissions(
    _operator: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    _permissionIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  permissionsOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOperator(
    _operator: PromiseOrValue<string>,
    _domain: PromiseOrValue<BigNumberish>,
    _permissionIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperators(
    _operators: PromiseOrValue<string>[],
    _domains: PromiseOrValue<BigNumberish>[],
    _permissionIndexes: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hasPermission(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPermissions(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    permissionsOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOperators(
      _operators: PromiseOrValue<string>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _permissionIndexes: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetOperator(address,address,uint256,uint256[],uint256)"(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      permissionIndexes?: null,
      packed?: null
    ): SetOperatorEventFilter;
    SetOperator(
      operator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      permissionIndexes?: null,
      packed?: null
    ): SetOperatorEventFilter;
  };

  estimateGas: {
    hasPermission(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermissions(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionsOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperators(
      _operators: PromiseOrValue<string>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _permissionIndexes: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasPermission(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermissions(
      _operator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionsOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      _domain: PromiseOrValue<BigNumberish>,
      _permissionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperators(
      _operators: PromiseOrValue<string>[],
      _domains: PromiseOrValue<BigNumberish>[],
      _permissionIndexes: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
