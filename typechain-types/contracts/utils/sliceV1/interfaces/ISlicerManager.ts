/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISlicerManagerInterface extends utils.Interface {
  functions: {
    "_createSlicer(address,bool,bool,uint256,uint256,uint256,address[])": FunctionFragment;
    "_upgradeSlicers(address)": FunctionFragment;
    "implementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_createSlicer"
      | "_upgradeSlicers"
      | "implementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_createSlicer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_upgradeSlicers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_createSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_upgradeSlicers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISlicerManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlicerManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _createSlicer(
      creator: PromiseOrValue<string>,
      isImmutable: PromiseOrValue<boolean>,
      isControlled: PromiseOrValue<boolean>,
      id: PromiseOrValue<BigNumberish>,
      minimumShares: PromiseOrValue<BigNumberish>,
      releaseTimelock: PromiseOrValue<BigNumberish>,
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _upgradeSlicers(
      newLogicImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;
  };

  _createSlicer(
    creator: PromiseOrValue<string>,
    isImmutable: PromiseOrValue<boolean>,
    isControlled: PromiseOrValue<boolean>,
    id: PromiseOrValue<BigNumberish>,
    minimumShares: PromiseOrValue<BigNumberish>,
    releaseTimelock: PromiseOrValue<BigNumberish>,
    currencies: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _upgradeSlicers(
    newLogicImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _createSlicer(
      creator: PromiseOrValue<string>,
      isImmutable: PromiseOrValue<boolean>,
      isControlled: PromiseOrValue<boolean>,
      id: PromiseOrValue<BigNumberish>,
      minimumShares: PromiseOrValue<BigNumberish>,
      releaseTimelock: PromiseOrValue<BigNumberish>,
      currencies: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string>;

    _upgradeSlicers(
      newLogicImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _createSlicer(
      creator: PromiseOrValue<string>,
      isImmutable: PromiseOrValue<boolean>,
      isControlled: PromiseOrValue<boolean>,
      id: PromiseOrValue<BigNumberish>,
      minimumShares: PromiseOrValue<BigNumberish>,
      releaseTimelock: PromiseOrValue<BigNumberish>,
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _upgradeSlicers(
      newLogicImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _createSlicer(
      creator: PromiseOrValue<string>,
      isImmutable: PromiseOrValue<boolean>,
      isControlled: PromiseOrValue<boolean>,
      id: PromiseOrValue<BigNumberish>,
      minimumShares: PromiseOrValue<BigNumberish>,
      releaseTimelock: PromiseOrValue<BigNumberish>,
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _upgradeSlicers(
      newLogicImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
