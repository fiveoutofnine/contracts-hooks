/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISlicerInterface extends utils.Interface {
  functions: {
    "_addCurrencies(address[])": FunctionFragment;
    "_handle1155Purchase(address,address,uint256,uint256)": FunctionFragment;
    "_handle721Purchase(address,address,uint256)": FunctionFragment;
    "_releaseFromFundsModule(address,address)": FunctionFragment;
    "_releaseFromSliceCore(address,address,uint256)": FunctionFragment;
    "_setChildSlicer(uint256,bool)": FunctionFragment;
    "_setCustomFee(bool,uint256)": FunctionFragment;
    "_setTotalShares(uint256)": FunctionFragment;
    "_updatePayees(address,address,bool,uint256,uint256)": FunctionFragment;
    "_updatePayeesReslice(address[],int32[],uint32)": FunctionFragment;
    "acceptsCurrency(address)": FunctionFragment;
    "batchReleaseAccounts(address[],address,bool)": FunctionFragment;
    "getFee()": FunctionFragment;
    "isPayeeAllowed(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "release(address,address,bool)": FunctionFragment;
    "slicerInfo()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unreleased(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addCurrencies"
      | "_handle1155Purchase"
      | "_handle721Purchase"
      | "_releaseFromFundsModule"
      | "_releaseFromSliceCore"
      | "_setChildSlicer"
      | "_setCustomFee"
      | "_setTotalShares"
      | "_updatePayees"
      | "_updatePayeesReslice"
      | "acceptsCurrency"
      | "batchReleaseAccounts"
      | "getFee"
      | "isPayeeAllowed"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "release"
      | "slicerInfo"
      | "supportsInterface"
      | "unreleased"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addCurrencies",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_handle1155Purchase",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_handle721Purchase",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_releaseFromFundsModule",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_releaseFromSliceCore",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setChildSlicer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCustomFee",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTotalShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatePayees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatePayeesReslice",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptsCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReleaseAccounts",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPayeeAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slicerInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unreleased",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_handle1155Purchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_handle721Purchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_releaseFromFundsModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_releaseFromSliceCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setChildSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatePayees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatePayeesReslice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptsCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchReleaseAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayeeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slicerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unreleased", data: BytesLike): Result;

  events: {};
}

export interface ISlicer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlicerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addCurrencies(
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _handle1155Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _handle721Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _releaseFromFundsModule(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _releaseFromSliceCore(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      accountSlices: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setChildSlicer(
      id: PromiseOrValue<BigNumberish>,
      addChildSlicerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setCustomFee(
      customFeeActive: PromiseOrValue<boolean>,
      customFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setTotalShares(
      totalShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _updatePayees(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      toRelease: PromiseOrValue<boolean>,
      senderShares: PromiseOrValue<BigNumberish>,
      transferredShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _updatePayeesReslice(
      accounts: PromiseOrValue<string>[],
      tokensDiffs: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptsCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batchReleaseAccounts(
      accounts: PromiseOrValue<string>[],
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    isPayeeAllowed(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    release(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, boolean, string[]] & {
        tokenId: BigNumber;
        minimumShares: BigNumber;
        creator: string;
        isImmutable: boolean;
        isControlled: boolean;
        currencies: string[];
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unreleased(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unreleasedAmount: BigNumber }>;
  };

  _addCurrencies(
    currencies: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _handle1155Purchase(
    buyer: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _handle721Purchase(
    buyer: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _releaseFromFundsModule(
    account: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _releaseFromSliceCore(
    account: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    accountSlices: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setChildSlicer(
    id: PromiseOrValue<BigNumberish>,
    addChildSlicerMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setCustomFee(
    customFeeActive: PromiseOrValue<boolean>,
    customFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setTotalShares(
    totalShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _updatePayees(
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    toRelease: PromiseOrValue<boolean>,
    senderShares: PromiseOrValue<BigNumberish>,
    transferredShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _updatePayeesReslice(
    accounts: PromiseOrValue<string>[],
    tokensDiffs: PromiseOrValue<BigNumberish>[],
    totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptsCurrency(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchReleaseAccounts(
    accounts: PromiseOrValue<string>[],
    currency: PromiseOrValue<string>,
    withdraw: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  isPayeeAllowed(
    payee: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  release(
    account: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    withdraw: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slicerInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean, boolean, string[]] & {
      tokenId: BigNumber;
      minimumShares: BigNumber;
      creator: string;
      isImmutable: boolean;
      isControlled: boolean;
      currencies: string[];
    }
  >;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unreleased(
    account: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _addCurrencies(
      currencies: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _handle1155Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _handle721Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _releaseFromFundsModule(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; protocolPayment: BigNumber }
    >;

    _releaseFromSliceCore(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      accountSlices: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setChildSlicer(
      id: PromiseOrValue<BigNumberish>,
      addChildSlicerMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setCustomFee(
      customFeeActive: PromiseOrValue<boolean>,
      customFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setTotalShares(
      totalShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatePayees(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      toRelease: PromiseOrValue<boolean>,
      senderShares: PromiseOrValue<BigNumberish>,
      transferredShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatePayeesReslice(
      accounts: PromiseOrValue<string>[],
      tokensDiffs: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptsCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchReleaseAccounts(
      accounts: PromiseOrValue<string>[],
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    isPayeeAllowed(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    release(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean, boolean, string[]] & {
        tokenId: BigNumber;
        minimumShares: BigNumber;
        creator: string;
        isImmutable: boolean;
        isControlled: boolean;
        currencies: string[];
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unreleased(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _addCurrencies(
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _handle1155Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _handle721Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _releaseFromFundsModule(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _releaseFromSliceCore(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      accountSlices: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setChildSlicer(
      id: PromiseOrValue<BigNumberish>,
      addChildSlicerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setCustomFee(
      customFeeActive: PromiseOrValue<boolean>,
      customFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setTotalShares(
      totalShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _updatePayees(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      toRelease: PromiseOrValue<boolean>,
      senderShares: PromiseOrValue<BigNumberish>,
      transferredShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _updatePayeesReslice(
      accounts: PromiseOrValue<string>[],
      tokensDiffs: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptsCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchReleaseAccounts(
      accounts: PromiseOrValue<string>[],
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    isPayeeAllowed(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    release(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slicerInfo(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unreleased(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addCurrencies(
      currencies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _handle1155Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _handle721Purchase(
      buyer: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _releaseFromFundsModule(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _releaseFromSliceCore(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      accountSlices: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setChildSlicer(
      id: PromiseOrValue<BigNumberish>,
      addChildSlicerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setCustomFee(
      customFeeActive: PromiseOrValue<boolean>,
      customFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setTotalShares(
      totalShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _updatePayees(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      toRelease: PromiseOrValue<boolean>,
      senderShares: PromiseOrValue<BigNumberish>,
      transferredShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _updatePayeesReslice(
      accounts: PromiseOrValue<string>[],
      tokensDiffs: PromiseOrValue<BigNumberish>[],
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptsCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchReleaseAccounts(
      accounts: PromiseOrValue<string>[],
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPayeeAllowed(
      payee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    release(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      withdraw: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slicerInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unreleased(
      account: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
