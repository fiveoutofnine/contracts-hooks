/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type SubSlicerProductStruct = {
  subSlicerId: PromiseOrValue<BigNumberish>;
  subProductId: PromiseOrValue<BigNumberish>;
};

export type SubSlicerProductStructOutput = [BigNumber, number] & {
  subSlicerId: BigNumber;
  subProductId: number;
};

export type CurrencyPriceStruct = {
  value: PromiseOrValue<BigNumberish>;
  dynamicPricing: PromiseOrValue<boolean>;
  currency: PromiseOrValue<string>;
};

export type CurrencyPriceStructOutput = [BigNumber, boolean, string] & {
  value: BigNumber;
  dynamicPricing: boolean;
  currency: string;
};

export type ProductParamsStruct = {
  subSlicerProducts: SubSlicerProductStruct[];
  currencyPrices: CurrencyPriceStruct[];
  data: PromiseOrValue<BytesLike>;
  purchaseData: PromiseOrValue<BytesLike>;
  availableUnits: PromiseOrValue<BigNumberish>;
  maxUnitsPerBuyer: PromiseOrValue<BigNumberish>;
  isFree: PromiseOrValue<boolean>;
  isInfinite: PromiseOrValue<boolean>;
};

export type ProductParamsStructOutput = [
  SubSlicerProductStructOutput[],
  CurrencyPriceStructOutput[],
  string,
  string,
  number,
  number,
  boolean,
  boolean
] & {
  subSlicerProducts: SubSlicerProductStructOutput[];
  currencyPrices: CurrencyPriceStructOutput[];
  data: string;
  purchaseData: string;
  availableUnits: number;
  maxUnitsPerBuyer: number;
  isFree: boolean;
  isInfinite: boolean;
};

export type FunctionStruct = {
  data: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
  externalAddress: PromiseOrValue<string>;
  checkFunctionSignature: PromiseOrValue<BytesLike>;
  execFunctionSignature: PromiseOrValue<BytesLike>;
};

export type FunctionStructOutput = [
  string,
  BigNumber,
  string,
  string,
  string
] & {
  data: string;
  value: BigNumber;
  externalAddress: string;
  checkFunctionSignature: string;
  execFunctionSignature: string;
};

export type PurchaseParamsStruct = {
  slicerId: PromiseOrValue<BigNumberish>;
  quantity: PromiseOrValue<BigNumberish>;
  currency: PromiseOrValue<string>;
  productId: PromiseOrValue<BigNumberish>;
  buyerCustomData: PromiseOrValue<BytesLike>;
};

export type PurchaseParamsStructOutput = [
  BigNumber,
  number,
  string,
  number,
  string
] & {
  slicerId: BigNumber;
  quantity: number;
  currency: string;
  productId: number;
  buyerCustomData: string;
};

export interface IProductsModuleInterface extends utils.Interface {
  functions: {
    "addProduct(uint256,((uint128,uint32)[],(uint248,bool,address)[],bytes,bytes,uint32,uint8,bool,bool),(bytes,uint256,address,bytes4,bytes4))": FunctionFragment;
    "ethBalance(uint256)": FunctionFragment;
    "payProducts(address,(uint128,uint32,address,uint32,bytes)[])": FunctionFragment;
    "productPrice(uint256,uint32,address)": FunctionFragment;
    "releaseEthToSlicer(uint256)": FunctionFragment;
    "removeProduct(uint256,uint32)": FunctionFragment;
    "setProductInfo(uint256,uint32,uint8,bool,bool,uint32,(uint248,bool,address)[])": FunctionFragment;
    "validatePurchase(uint256,uint32)": FunctionFragment;
    "validatePurchaseUnits(address,uint256,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProduct"
      | "ethBalance"
      | "payProducts"
      | "productPrice"
      | "releaseEthToSlicer"
      | "removeProduct"
      | "setProductInfo"
      | "validatePurchase"
      | "validatePurchaseUnits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [PromiseOrValue<BigNumberish>, ProductParamsStruct, FunctionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ethBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payProducts",
    values: [PromiseOrValue<string>, PurchaseParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "productPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEthToSlicer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      CurrencyPriceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchaseUnits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEthToSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchaseUnits",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IProductsModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProductsModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ethBalance(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    payProducts(
      buyer: PromiseOrValue<string>,
      purchases: PurchaseParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    productPrice(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProductInfo(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      newMaxUnits: PromiseOrValue<BigNumberish>,
      isFree: PromiseOrValue<boolean>,
      isInfinite: PromiseOrValue<boolean>,
      newUnits: PromiseOrValue<BigNumberish>,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatePurchase(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: PromiseOrValue<string>,
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { purchases: BigNumber }>;
  };

  addProduct(
    slicerId: PromiseOrValue<BigNumberish>,
    params: ProductParamsStruct,
    externalCall_: FunctionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ethBalance(
    slicerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  payProducts(
    buyer: PromiseOrValue<string>,
    purchases: PurchaseParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  productPrice(
    slicerId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      ethPayment: BigNumber;
      currencyPayment: BigNumber;
    }
  >;

  releaseEthToSlicer(
    slicerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProduct(
    slicerId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProductInfo(
    slicerId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    newMaxUnits: PromiseOrValue<BigNumberish>,
    isFree: PromiseOrValue<boolean>,
    isInfinite: PromiseOrValue<boolean>,
    newUnits: PromiseOrValue<BigNumberish>,
    currencyPrices: CurrencyPriceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatePurchase(
    slicerId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
  >;

  validatePurchaseUnits(
    account: PromiseOrValue<string>,
    slicerId: PromiseOrValue<BigNumberish>,
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ethBalance(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payProducts(
      buyer: PromiseOrValue<string>,
      purchases: PurchaseParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    productPrice(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductInfo(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      newMaxUnits: PromiseOrValue<BigNumberish>,
      isFree: PromiseOrValue<boolean>,
      isInfinite: PromiseOrValue<boolean>,
      newUnits: PromiseOrValue<BigNumberish>,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    validatePurchase(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: PromiseOrValue<string>,
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ethBalance(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payProducts(
      buyer: PromiseOrValue<string>,
      purchases: PurchaseParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    productPrice(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseEthToSlicer(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProductInfo(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      newMaxUnits: PromiseOrValue<BigNumberish>,
      isFree: PromiseOrValue<boolean>,
      isInfinite: PromiseOrValue<boolean>,
      newUnits: PromiseOrValue<BigNumberish>,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatePurchase(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchaseUnits(
      account: PromiseOrValue<string>,
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ethBalance(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payProducts(
      buyer: PromiseOrValue<string>,
      purchases: PurchaseParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    productPrice(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseEthToSlicer(
      slicerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProduct(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProductInfo(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      newMaxUnits: PromiseOrValue<BigNumberish>,
      isFree: PromiseOrValue<boolean>,
      isInfinite: PromiseOrValue<boolean>,
      newUnits: PromiseOrValue<BigNumberish>,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatePurchase(
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchaseUnits(
      account: PromiseOrValue<string>,
      slicerId: PromiseOrValue<BigNumberish>,
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
