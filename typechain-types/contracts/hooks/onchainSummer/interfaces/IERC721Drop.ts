/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IERC721DropInterface extends utils.Interface {
  functions: {
    "mintWithRewards(address,uint256,string,address)": FunctionFragment;
    "salesConfig()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "mintWithRewards" | "salesConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mintWithRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "salesConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mintWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesConfig",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IERC721Drop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC721DropInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintWithRewards(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      mintReferral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    salesConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        publicSalePrice: BigNumber;
        maxSalePurchasePerAddress: number;
        publicSaleStart: BigNumber;
        publicSaleEnd: BigNumber;
        presaleStart: BigNumber;
        presaleEnd: BigNumber;
        presaleMerkleRoot: string;
      }
    >;
  };

  mintWithRewards(
    recipient: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    comment: PromiseOrValue<string>,
    mintReferral: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  salesConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      publicSalePrice: BigNumber;
      maxSalePurchasePerAddress: number;
      publicSaleStart: BigNumber;
      publicSaleEnd: BigNumber;
      presaleStart: BigNumber;
      presaleEnd: BigNumber;
      presaleMerkleRoot: string;
    }
  >;

  callStatic: {
    mintWithRewards(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      mintReferral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    salesConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        publicSalePrice: BigNumber;
        maxSalePurchasePerAddress: number;
        publicSaleStart: BigNumber;
        publicSaleEnd: BigNumber;
        presaleStart: BigNumber;
        presaleEnd: BigNumber;
        presaleMerkleRoot: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    mintWithRewards(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      mintReferral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    salesConfig(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mintWithRewards(
      recipient: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      comment: PromiseOrValue<string>,
      mintReferral: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    salesConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
