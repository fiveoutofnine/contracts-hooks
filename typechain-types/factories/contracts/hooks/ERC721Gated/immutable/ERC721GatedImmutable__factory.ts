/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC721GatedImmutable,
  ERC721GatedImmutableInterface,
} from "../../../../../contracts/hooks/ERC721Gated/immutable/ERC721GatedImmutable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "productsModuleAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slicerId_",
        type: "uint256",
      },
      {
        internalType: "contract IERC721",
        name: "erc721_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPurchase",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSuccessful",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongSlicer",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isPurchaseAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "isAllowed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slicerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "productId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "slicerCustomData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "buyerCustomData",
        type: "bytes",
      },
    ],
    name: "onProductPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103e53803806103e583398101604081905261002f9161007e565b600080546001600160a01b039485166001600160a01b031991821617909155600192909255600280549190931691161790556100c1565b6001600160a01b038116811461007b57600080fd5b50565b60008060006060848603121561009357600080fd5b835161009e81610066565b6020850151604086015191945092506100b681610066565b809150509250925092565b610315806100d06000396000f3fe6080604052600436106100295760003560e01c806395db93681461002e578063a23fffb914610062575b600080fd5b34801561003a57600080fd5b5061004e610049366004610228565b610077565b604051901515815260200160405180910390f35b610075610070366004610228565b6100f7565b005b6002546040516370a0823160e01b81526001600160a01b03868116600483015260009283929116906370a0823190602401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e991906102c6565b151598975050505050505050565b8561010181610135565b61010f878787878787610077565b61012c57604051631eb49d6d60e11b815260040160405180910390fd5b50505050505050565b806001541461015757604051632eafdb6960e01b815260040160405180910390fd5b6000546001600160a01b03163314610182576040516347322d0360e01b815260040160405180910390fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101ac57600080fd5b813567ffffffffffffffff808211156101c7576101c7610185565b604051601f8301601f19908116603f011681019082821181831017156101ef576101ef610185565b8160405283815286602085880101111561020857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561024157600080fd5b863595506020870135945060408701356001600160a01b038116811461026657600080fd5b935060608701359250608087013567ffffffffffffffff8082111561028a57600080fd5b6102968a838b0161019b565b935060a08901359150808211156102ac57600080fd5b506102b989828a0161019b565b9150509295509295509295565b6000602082840312156102d857600080fd5b505191905056fea264697066735822122079e82fa0e3c3fc600662e714ad8956902649d06251a3c4433be30f69c3a1036264736f6c634300080d0033";

type ERC721GatedImmutableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721GatedImmutableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721GatedImmutable__factory extends ContractFactory {
  constructor(...args: ERC721GatedImmutableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    productsModuleAddress_: PromiseOrValue<string>,
    slicerId_: PromiseOrValue<BigNumberish>,
    erc721_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721GatedImmutable> {
    return super.deploy(
      productsModuleAddress_,
      slicerId_,
      erc721_,
      overrides || {}
    ) as Promise<ERC721GatedImmutable>;
  }
  override getDeployTransaction(
    productsModuleAddress_: PromiseOrValue<string>,
    slicerId_: PromiseOrValue<BigNumberish>,
    erc721_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      productsModuleAddress_,
      slicerId_,
      erc721_,
      overrides || {}
    );
  }
  override attach(address: string): ERC721GatedImmutable {
    return super.attach(address) as ERC721GatedImmutable;
  }
  override connect(signer: Signer): ERC721GatedImmutable__factory {
    return super.connect(signer) as ERC721GatedImmutable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721GatedImmutableInterface {
    return new utils.Interface(_abi) as ERC721GatedImmutableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721GatedImmutable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC721GatedImmutable;
  }
}
